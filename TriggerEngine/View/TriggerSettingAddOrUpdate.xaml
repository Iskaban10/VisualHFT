<Window x:Class="VisualHFT.TriggerEngine.View.TriggerSettingAddOrUpdate"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:VisualHFT.TriggerEngine.View"
        xmlns:enums="clr-namespace:VisualHFT.TriggerEngine"
        xmlns:converters="clr-namespace:VisualHFT.Converters"
        mc:Ignorable="d"  
TextElement.FontWeight="Regular"
TextElement.FontSize="15"
TextOptions.TextFormattingMode="Ideal" 
TextOptions.TextRenderingMode="Auto"         
      Background="{DynamicResource MaterialDesignPaper}"  
        xmlns:sys="clr-namespace:System;assembly=mscorlib"
      Title="TriggerSettingsView" Height="450" Width="800">
    
    <Window.Resources>
        <ObjectDataProvider x:Key="ConditionOperatorEnum"
                            MethodName="GetValues"
                            ObjectType="{x:Type sys:Enum}">
            <ObjectDataProvider.MethodParameters>
                <x:Type TypeName="enums:ConditionOperator" />
            </ObjectDataProvider.MethodParameters>
        </ObjectDataProvider>
        
        <ObjectDataProvider x:Key="ActionTypeOperatorEnum"
                         MethodName="GetValues"
                         ObjectType="{x:Type sys:Enum}">
            <ObjectDataProvider.MethodParameters>
                <x:Type TypeName="enums:ActionType" />
            </ObjectDataProvider.MethodParameters>
        </ObjectDataProvider>
        <ObjectDataProvider x:Key="TimeWindowUnitOperatorEnum"
                     MethodName="GetValues"
                     ObjectType="{x:Type sys:Enum}">
            <ObjectDataProvider.MethodParameters>
                <x:Type TypeName="enums:TimeWindowUnit" />
            </ObjectDataProvider.MethodParameters>
        </ObjectDataProvider> 
        <converters:EnumDescriptionConverter x:Key="EnumDescriptionConverter" />
        <BooleanToVisibilityConverter x:Key="BoolToVisibilityConverter" />
    </Window.Resources> 

    <Grid x:Name="MainGrid" Margin="10">
 
        <StackPanel VerticalAlignment="Stretch">

            <StackPanel>
                <TextBlock Text="Rule Name" Style="{StaticResource MaterialDesignBody2TextBlock}" Foreground="White" VerticalAlignment="Center" Margin="0,0,0,10"/>
                <TextBox x:Name="txtTriggerName" Text="{Binding Name}" Foreground="White"/>
            </StackPanel>
 

            <TabControl>
                <TabItem>
                    <TabItem.Header>
                        <StackPanel Orientation="Horizontal">

                            <Label Margin="2,0,0,0" VerticalAlignment="Center" Foreground="White">Conditions</Label>
                            <TextBlock Foreground="White" Name="img" Height="auto" Width="auto" MouseEnter="ShowConditionToolTip" >ℹ️</TextBlock>
                            <Popup PopupAnimation="Fade" Placement="Mouse" AllowsTransparency="True" StaysOpen="False" x:Name="ConditionToolTip" >
                                <Border Background="White" BorderBrush="Gray" CornerRadius="3" BorderThickness="1">
                                    <StackPanel Margin="10" Orientation="Horizontal" >
                                        <StackPanel>
                                            <TextBlock TextWrapping="Wrap" Width="350" Foreground="Black" FontSize="12">
         <Run FontWeight="Bold">How to configure a condition?</Run>
<LineBreak />
<LineBreak />
<Run>Select a plugin from the list, for example, "LOB Imbalance". This plugin will be used to set a condition.</Run>
<LineBreak />
<LineBreak />
<Run>Next, choose a condition operator such as "greater than", "less than", or "equal to". This operator defines how the plugin's value will be compared.</Run>
<LineBreak />
<LineBreak />
<Run>You can add multiple conditions for the same plugin if needed.</Run>
<LineBreak />
<LineBreak />
<Run>Then, enter a value to compare the plugin's data against. This value acts as the threshold for your condition.</Run>
<LineBreak />
<LineBreak />
<Run>Together, these settings will check if the selected plugin’s value meets the condition. For example, if you select "greater than" and enter 2, it will check if the plugin’s value is greater than 2.</Run>
                                            </TextBlock>
                                        </StackPanel>
                                    </StackPanel>
                                </Border>
                            </Popup> 
                        </StackPanel>
                    </TabItem.Header>
                    <StackPanel>
                       
                        <StackPanel Orientation="Horizontal" HorizontalAlignment="Stretch"> 
                            <Button HorizontalAlignment="Right" x:Name="btnAddNewCondition" Click="btnAddNewCondition_Click" Height="32">➕</Button>
                        </StackPanel>
                        <StackPanel>
                            <DataGrid ItemsSource="{Binding Path=Condition, Mode=TwoWay}"
                        AutoGenerateColumns="False" VerticalAlignment="Top" HorizontalAlignment="Stretch" HorizontalContentAlignment="Stretch"
                        FontWeight="UltraLight" FontSize="9" FontFamily="Verdana" x:Name="lstData"
                            Style="{DynamicResource MaterialDesignDataGrid}" 
                            SelectionUnit="FullRow" CanUserDeleteRows="False" CanUserAddRows="False" 
                            ClipboardCopyMode="IncludeHeader" HeadersVisibility="Column" AlternationCount="2" IsReadOnly="false" BorderThickness="0" 
                            CanUserReorderColumns="False" CanUserResizeColumns="False" CanUserResizeRows="False" CanUserSortColumns="False" 
                            HorizontalScrollBarVisibility="Hidden" IsHitTestVisible="True" 
                            EnableRowVirtualization="True" 
                            EnableColumnVirtualization="False" 
                            VerticalScrollBarVisibility="Auto"  
                            Padding="0" >

                                <DataGrid.RowStyle>
                                    <Style TargetType="DataGridRow">

                                        <Setter Property="Padding" Value="0" />
                                        <Setter Property="Margin" Value="0" />
                                        <Style.Triggers>
                                            <Trigger Property="ItemsControl.AlternationIndex" Value="1">
                                                <Setter Property="Background" Value="Transparent"/>
                                            </Trigger>
                                            <Trigger Property="ItemsControl.AlternationIndex" Value="0">
                                                <Setter Property="Background" Value="Black"/>
                                            </Trigger>
                                        </Style.Triggers>
                                    </Style>
                                </DataGrid.RowStyle>
                                <DataGrid.Columns>
                                    <DataGridTemplateColumn  Header="Plugin"  HeaderStyle="{DynamicResource RightAlignedHeader}">
                                        <DataGridTemplateColumn.CellTemplate>
                                            <DataTemplate>
                                                <ComboBox ItemsSource="{Binding PluginNames, RelativeSource={RelativeSource AncestorType=Window}}" DisplayMemberPath="TileName"
                                              SelectedValue="{Binding Plugin, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"  SelectedValuePath="PluginID" SelectionChanged="ComboBox_SelectionChanged_1"
                                              Width="150" />    

                                            </DataTemplate>
                                        </DataGridTemplateColumn.CellTemplate>
                                    </DataGridTemplateColumn>
                                    <DataGridTemplateColumn Header="Condition"  
                                                 HeaderStyle="{DynamicResource RightAlignedHeader}">
                                        <DataGridTemplateColumn.CellTemplate>
                                            <DataTemplate>
                                                <ComboBox ItemsSource="{Binding Source={StaticResource ConditionOperatorEnum}}" SelectedItem="{Binding Operator}" />
                                            </DataTemplate>
                                        </DataGridTemplateColumn.CellTemplate>
                                    </DataGridTemplateColumn>
                                    <DataGridTextColumn Header="Value" Binding="{Binding Threshold}"
                                          Width="80" ElementStyle="{DynamicResource RightAligned}" 
                                          HeaderStyle="{DynamicResource RightAlignedHeader}"/>


                                    <DataGridTemplateColumn Header="Actions" >
                                        <DataGridTemplateColumn.CellTemplate>
                                            <DataTemplate>
                                                <TextBlock ><Hyperlink Click="RemoveCondition" CommandParameter="{Binding}"> <Run  Text="Remove"/></Hyperlink>
                                                </TextBlock>
                                            </DataTemplate>
                                        </DataGridTemplateColumn.CellTemplate>

                                    </DataGridTemplateColumn>
                                </DataGrid.Columns>
                            </DataGrid>

                        </StackPanel>

                    </StackPanel>
            
           
                </TabItem>
                <TabItem>
                    <TabItem.Header>
                        <StackPanel Orientation="Horizontal">

                            <Label Margin="2,0,0,0" VerticalAlignment="Center" Foreground="White">Action</Label>
                            <TextBlock Foreground="White" x:Name="Condtion" Height="auto" Width="auto" MouseEnter="ShowActionToolTip" >ℹ️</TextBlock>
                            <Popup PopupAnimation="Fade" Placement="Mouse" AllowsTransparency="True" StaysOpen="False" x:Name="ActionToolTip" >
                                <Border Background="White" BorderBrush="Gray" CornerRadius="3" BorderThickness="1">
                                    <StackPanel Margin="10" Orientation="Horizontal" >
                                        <StackPanel>
                                            <TextBlock TextWrapping="Wrap" Width="350" Foreground="Black" FontSize="12">
 
 <Run FontWeight="Bold">How to configure an action?</Run>
  <LineBreak />
  <LineBreak />
  <Run>1. Each action has a predefined type such as:</Run>
  <LineBreak />
  <Run>   • </Run>
  <Run FontWeight="Bold">Notify In-APP:</Run>
  <Run> Shows a message inside the application UI.</Run>
  <LineBreak />
  <Run>   • </Run>
  <Run FontWeight="Bold">WebHook URL:</Run>
  <Run> Sends an HTTP/HTTPS POST request to a specified API endpoint.</Run>
  <LineBreak />
  <Run>   • </Run>
  <LineBreak />
  <LineBreak />
  <Run>2. If the Action type is </Run>
  <Run FontWeight="Bold">WebHook API</Run>
  <Run>, configure the following fields:</Run>
  <LineBreak />
  <Run>   • </Run>
  <Run FontWeight="Bold">URL:</Run>
  <Run> Destination endpoint for the request.</Run>
  <LineBreak />
  <Run>   • </Run>
  <Run FontWeight="Bold">Method:</Run>
  <Run> HTTP method like POST or GET. Currently on POST is supported</Run>
  <LineBreak />
  <Run>   • </Run>
  <Run FontWeight="Bold">Body Template:</Run>
  <Run> JSON payload with dynamic placeholders like </Run>
  <Run FontStyle="Italic">{{plugin}}</Run>
  <Run> or </Run>
  <Run FontStyle="Italic">{{condition}} etc</Run><Run>.</Run>
  <LineBreak />
  <Run>   • </Run>
  <Run FontWeight="Bold">Headers:</Run>
  <Run> Optional custom HTTP headers.</Run>
  <LineBreak />
  <LineBreak />

  <LineBreak />
  <LineBreak />
  <Run>Once configured, the action will automatically execute whenever its associated trigger conditions are satisfied.</Run>
                                            </TextBlock>
                                        </StackPanel>
                                    </StackPanel>
                                </Border>
                            </Popup>
                        </StackPanel>
                    </TabItem.Header>

                    <StackPanel Orientation="Vertical"  HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                        <!-- Notify in app -->
                        <StackPanel Orientation="Horizontal" Margin="0,10">
                            <CheckBox Checked="InAppChecked" x:Name="inappCheck" Unchecked="InAppUnChecked" IsChecked="False" VerticalAlignment="Top" Margin="0,4,10,0"/>
                            <StackPanel>
                                <TextBlock Text="Notify in app" Foreground="White" FontWeight="Bold"/>
                                <TextBlock Text="Provides a push notification in the Visual HFT App notification centre." 
                       Foreground="#CCCCCC" 
                       TextWrapping="Wrap" 
                       FontSize="12"/>
                            </StackPanel>
                        </StackPanel>

                        <!-- Webhook URL -->
                        <StackPanel Orientation="Horizontal" Margin="0,10">
                            <CheckBox x:Name="webhookCheck"
              Checked="WebHookChecked"
              Unchecked="WebHookUnChecked"
              IsChecked="False"
              VerticalAlignment="Top"
              Margin="0,4,10,0"/>

                            <StackPanel>
                                <StackPanel Orientation="Horizontal">
                                    <TextBlock Text="Webhook URL" Foreground="White" FontWeight="Bold"/>
                                    <TextBlock Text=" ?" Foreground="LightGray" FontWeight="Bold" Margin="5,0,0,0"/>
 
                                    <TextBlock Margin="5,0,0,0" Visibility="{Binding IsChecked, ElementName=webhookCheck, Converter={StaticResource BoolToVisibilityConverter}}"><Hyperlink Click="ClickSetAPI"><Run Text="Configure" /></Hyperlink></TextBlock>
                                </StackPanel>

                                <TextBlock Text="Sends a POST request to your specified URL when your alert triggers."
                   Foreground="#CCCCCC" 
                   TextWrapping="Wrap" 
                   FontSize="12"/>
                            </StackPanel>
                        </StackPanel>
                    </StackPanel>

                    <!--<StackPanel VerticalAlignment="Stretch" Height="5000">
                        <StackPanel Orientation="Horizontal" HorizontalAlignment="Stretch">
                            <Button HorizontalAlignment="Right" x:Name="btnAddNewAction" Click="btnAddNewAction_Click" Height="32">➕</Button>
                        </StackPanel>
                        <StackPanel>
                            <DataGrid ItemsSource="{Binding Path=Actions, Mode=TwoWay}"
                            AutoGenerateColumns="False" VerticalAlignment="Top" HorizontalAlignment="Stretch" HorizontalContentAlignment="Stretch"
                            FontWeight="UltraLight" FontSize="9" FontFamily="Verdana" x:Name="lstDataAction"
                                Style="{DynamicResource MaterialDesignDataGrid}" 
                                SelectionUnit="FullRow" CanUserDeleteRows="False" CanUserAddRows="False" 
                                ClipboardCopyMode="IncludeHeader" HeadersVisibility="Column" AlternationCount="2" IsReadOnly="false" BorderThickness="0" 
                                CanUserReorderColumns="False" CanUserResizeColumns="False" CanUserResizeRows="False" CanUserSortColumns="False" 
                                HorizontalScrollBarVisibility="Hidden" IsHitTestVisible="True" 
                                EnableRowVirtualization="True" 
                                EnableColumnVirtualization="False" 
                                 
                                VerticalScrollBarVisibility="Auto"  
                                Padding="0" >       

                                <DataGrid.RowStyle>
                                    <Style TargetType="DataGridRow">
                                        <Setter Property="Padding" Value="0" />
                                        <Setter Property="Margin" Value="0" />
                                        <Style.Triggers>
                                            <Trigger Property="ItemsControl.AlternationIndex" Value="1">
                                                <Setter Property="Background" Value="Transparent"/>
                                            </Trigger>
                                            <Trigger Property="ItemsControl.AlternationIndex" Value="0">
                                                <Setter Property="Background" Value="Black"/>
                                            </Trigger>
                                        </Style.Triggers>
                                    </Style>
                                </DataGrid.RowStyle>
                                <DataGrid.Columns>

                                    <DataGridTemplateColumn  Header="Type"  HeaderStyle="{DynamicResource RightAlignedHeader}">
                                        <DataGridTemplateColumn.CellTemplate>
                                            <DataTemplate>
                                                <ComboBox ItemsSource="{Binding Source={StaticResource ActionTypeOperatorEnum}}" SelectedItem="{Binding Type}" Width="150"   SelectedValuePath="Value"  DisplayMemberPath="Description"   SelectionChanged="ComboBox_SelectionChanged">
                                                    <ComboBox.ItemTemplate>
                                                        <DataTemplate>
                                                            <TextBlock Text="{Binding Converter={StaticResource EnumDescriptionConverter}}" />
                                                        </DataTemplate>
                                                    </ComboBox.ItemTemplate>
                                                </ComboBox>
                                            </DataTemplate>
                                        </DataGridTemplateColumn.CellTemplate>
                                    </DataGridTemplateColumn>
                                    <DataGridTextColumn Header="Cool down Duration" Binding="{Binding CooldownDuration}"
                                          Width="150" ElementStyle="{DynamicResource RightAligned}" 
                                          HeaderStyle="{DynamicResource RightAlignedHeader}"/>
                                    <DataGridTemplateColumn  Header="Time Window"  HeaderStyle="{DynamicResource RightAlignedHeader}">
                                        <DataGridTemplateColumn.CellTemplate>
                                            <DataTemplate>
                                                <ComboBox ItemsSource="{Binding Source={StaticResource TimeWindowUnitOperatorEnum}}" SelectedItem="{Binding CooldownUnit}" Width="150" />
                                            </DataTemplate>
                                        </DataGridTemplateColumn.CellTemplate>
                                    </DataGridTemplateColumn>
                                    <DataGridTemplateColumn Header="Link" >
                                        <DataGridTemplateColumn.CellTemplate>
                                            <DataTemplate>
                                                <TextBlock Visibility="{Binding IsEnabled, Converter={StaticResource BoolToVisibilityConverter}}">
                                                    <Hyperlink Click="ClickSetAPI">
                                                        <Run Text="{Binding LinkText}" />
                                                    </Hyperlink>        
                                                </TextBlock>
                                            </DataTemplate>
                                        </DataGridTemplateColumn.CellTemplate>
                                       
                                    </DataGridTemplateColumn>
                                    
                                    <DataGridTemplateColumn Header="Actions" >
                                        <DataGridTemplateColumn.CellTemplate>
                                            <DataTemplate>
                                                <TextBlock ><Hyperlink Click="RemoveAction" CommandParameter="{Binding}"> <Run  Text="Remove"/></Hyperlink>
                                                </TextBlock>
                                            </DataTemplate>
                                        </DataGridTemplateColumn.CellTemplate>

                                    </DataGridTemplateColumn>
                                </DataGrid.Columns>
                                
                            </DataGrid>

                        </StackPanel>
                    </StackPanel>-->
                    
                    
                </TabItem>
            </TabControl>

        </StackPanel>
        <StackPanel VerticalAlignment="Bottom" Orientation="Horizontal">
            <Button Name="Save" Margin="0,0,10,0" Click="Save_Click">Save</Button>
            <Button Name="Cancel" Margin="0,0,10,0" Click="Cancel_Click">Cancel</Button>
        </StackPanel>
    </Grid> 
</Window>
