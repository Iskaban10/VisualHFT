<UserControl x:Class="MarketConnectorTemplate.UserControls.PluginSettingsView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             mc:Ignorable="d"
             d:DesignHeight="450" d:DesignWidth="800">
    <!--
        This XAML file defines a simple settings page for a market connector.
        It mirrors the look and feel of the built‑in connectors in VisualHFT
        and is meant to be customised by developers.  Bindings on text boxes
        point directly at the properties on your settings class (see
        TemplateSettings.cs).  When you add or remove settings, update the
        bindings accordingly.
    -->
    <ScrollViewer VerticalScrollBarVisibility="Auto">
        <StackPanel Margin="10" Orientation="Vertical" >
            <!-- Header explaining why API keys are optional -->
            <TextBlock Text="Why API keys are needed?" FontWeight="Bold" Margin="0,0,0,5"/>
            <TextBlock TextWrapping="Wrap" Margin="0,0,0,10">
                API keys allow the connector to access real‑time market data from the
                exchange, including full depth and authenticated streams.  If you
                leave these fields empty the plug‑in will only subscribe to
                publicly available data.  Your API credentials are stored
                locally on your machine and are never shared.
            </TextBlock>
            <TextBlock Margin="0,0,0,10">
                <Hyperlink NavigateUri="https://www.example.com" RequestNavigate="Hyperlink_RequestNavigate">API creation page</Hyperlink>
            </TextBlock>

            <!-- API credentials -->
            <Grid Margin="0,10,0,10" >
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>

                <!-- API key -->
                <TextBlock Text="API Key:" VerticalAlignment="Center" Grid.Row="0" Grid.Column="0" Margin="0,0,5,5"/>
                <TextBox Text="{Binding ApiKey, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Grid.Row="0" Grid.Column="1" Margin="0,0,0,5"/>

                <!-- API secret -->
                <TextBlock Text="API Secret:" VerticalAlignment="Center" Grid.Row="1" Grid.Column="0" Margin="0,0,5,5"/>
                <PasswordBox Password="{Binding ApiSecret, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Grid.Row="1" Grid.Column="1" Margin="0,0,0,5"/>

                <!-- Symbols -->
                <TextBlock Text="Symbols:" VerticalAlignment="Center" Grid.Row="2" Grid.Column="0" Margin="0,0,5,5"/>
                <TextBox Text="{Binding Symbols, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Grid.Row="2" Grid.Column="1" Margin="0,0,0,5"/>

                <!-- Depth levels -->
                <TextBlock Text="Depth Levels:" VerticalAlignment="Center" Grid.Row="3" Grid.Column="0" Margin="0,0,5,5"/>
                <TextBox Text="{Binding DepthLevels, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Grid.Row="3" Grid.Column="1" Margin="0,0,0,5"/>

                <!-- Aggregation level -->
                <TextBlock Text="Aggregation (ms):" VerticalAlignment="Center" Grid.Row="4" Grid.Column="0" Margin="0,0,5,0"/>
                <TextBox Text="{Binding AggregationLevelMs, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Grid.Row="4" Grid.Column="1" />
            </Grid>

            <Separator Margin="0,10"/>

            <!-- Symbol normalisation info -->
            <TextBlock Text="Symbol Normalisation Explained" FontWeight="Bold" Margin="0,0,0,5"/>
            <TextBlock TextWrapping="Wrap" Margin="0,0,0,5">
                Different exchanges use varying symbol formats for the same financial
                instrument.  For consistent analysis across exchanges it is often
                beneficial to normalise symbols.  For example, BTCUSDT on Binance
                and tBTCUSD on Bitfinex can both be represented as BTC/USD.
            </TextBlock>
            <TextBlock TextWrapping="Wrap" Margin="0,0,0,5">
                You can define the normalisation directly inside the symbol input
                using parentheses: BTCUSDT(BTC/USD),ETHUSDT(ETH/USD).  The text
                before the parentheses is the native exchange symbol; the text
                inside the parentheses is your normalised representation.  If you
                omit parentheses no normalisation occurs.
            </TextBlock>
        </StackPanel>
    </ScrollViewer>
</UserControl>